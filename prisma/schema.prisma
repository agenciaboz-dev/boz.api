// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
	provider = "mysql"
	url = env("DATABASE_URL")
}
generator client {
	provider = "prisma-client-js"
	previewFeatures = ["fullTextSearch","fullTextIndex"]
}
model Customer {
	id Int @id @default(autoincrement())
	name String 
	active Boolean 
	recomendations String @db.Text
	image String @default("") @db.Text
	projects Project[] @relation(name: "CustomerToProject")
	qrcodes QrCode[] @relation(name: "CustomerToQrCode")
	services Service[] @relation(name: "CustomerToService")
}
model Department {
	id Int @id @default(autoincrement())
	name String 
	users User[] @relation(name: "DepartmentToUser")
}
model User {
	id Int @id @default(autoincrement())
	departmentId Int 
	department Department @relation(name: "DepartmentToUser", fields: [departmentId], references: [id], onDelete: Cascade)
	working_projects Worker[] @relation(name: "UserToWorker")
	qrcodes QrCode[] @relation(name: "QrCodeToUser")
	roles Role[] @relation(name: "RoleToUser")
	statusLog StatusLog[] @relation(name: "StatusLogToUser")
	username String @unique
	email String @unique
	password String 
	name String 
	cpf String 
	birth DateTime 
	phone String @default("")
	image String @default("") @db.Text
	googleId String? 
	googleToken String? @db.Text
	apiTesters ApiTester[] @relation(name: "ApiTesterToUser")
	testerRequests TesterRequest[] @relation(name: "TesterRequestToUser")
	testerEvents TestarEvent[] @relation(name: "TestarEventToUser")
	warnings Warning[] @relation(name: "UserToWarning")
	confirmedWarnings Warning[] @relation(name: "confirmed")
	comments Comment[] @relation(name: "CommentToUser")
}
model Project {
	id Int @id @default(autoincrement())
	name String 
	description String? @db.Text
	deadline String? 
	times_id Int @unique
	times Time @relation(name: "ProjectToTime", fields: [times_id], references: [id], onDelete: Cascade)
	customer_id Int 
	customer Customer @relation(name: "CustomerToProject", fields: [customer_id], references: [id], onDelete: Cascade)
	workers Worker[] @relation(name: "ProjectToWorker")
	links Link[] @relation(name: "LinkToProject")
}
model Worker {
	id Int @id @default(autoincrement())
	admin Boolean @default(false)
	joined_date String 
	times Time[] @relation(name: "TimeToWorker")
	user_id Int 
	user User @relation(name: "UserToWorker", fields: [user_id], references: [id], onDelete: Cascade)
	project_id Int 
	project Project @relation(name: "ProjectToWorker", fields: [project_id], references: [id], onDelete: Cascade)
}
model Time {
	id Int @id @default(autoincrement())
	started String 
	ended String? 
	worked String? 
	role String? 
	worker_id Int? 
	worker Worker? @relation(name: "TimeToWorker", fields: [worker_id], references: [id], onDelete: Cascade)
	project Project? @relation(name: "ProjectToTime")
}
model Link {
	id Int @id @default(autoincrement())
	name String? 
	url String @db.Text
	project_id Int? 
	proeject Project? @relation(name: "LinkToProject", fields: [project_id], references: [id], onDelete: Cascade)
}
model QrCode {
	id Int @id @default(autoincrement())
	name String 
	code String @db.Text
	datetime DateTime @default(now())
	userId Int 
	user User @relation(name: "QrCodeToUser", fields: [userId], references: [id], onDelete: Cascade)
	customerId Int 
	customer Customer @relation(name: "CustomerToQrCode", fields: [customerId], references: [id], onDelete: Cascade)
}
model Role {
	id Int @id @default(autoincrement())
	tag String @unique
	name String 
	project_roles String? @db.Text
	users User[] @relation(name: "RoleToUser")
}
model Service {
	id Int @id @default(autoincrement())
	tag String @unique
	name String 
	customers Customer[] @relation(name: "CustomerToService")
}
model StatusLog {
	id Int @id @default(autoincrement())
	status Int 
	datetime DateTime @default(now())
	userId Int 
	user User @relation(name: "StatusLogToUser", fields: [userId], references: [id], onDelete: Cascade)
}
model ApiTester {
	id Int @id @default(autoincrement())
	name String 
	socket Boolean 
	baseUrl String 
	port String 
	description String @default("") @db.Text
	requests TesterRequest[] @relation(name: "ApiTesterToTesterRequest")
	events TestarEvent[] @relation(name: "ApiTesterToTestarEvent")
	creatorId Int @default(2)
	creator User @relation(name: "ApiTesterToUser", fields: [creatorId], references: [id], onDelete: Cascade)
}
model TesterRequest {
	id Int @id @default(autoincrement())
	name String 
	url String 
	method String 
	payload String @db.Text
	response String @db.Text
	apiId Int 
	api ApiTester @relation(name: "ApiTesterToTesterRequest", fields: [apiId], references: [id], onDelete: Cascade)
	creatorId Int 
	creator User @relation(name: "TesterRequestToUser", fields: [creatorId], references: [id], onDelete: Cascade)
}
model TestarEvent {
	id Int @id @default(autoincrement())
	name String 
	event String 
	payload String @db.Text
	apiId Int 
	api ApiTester @relation(name: "ApiTesterToTestarEvent", fields: [apiId], references: [id], onDelete: Cascade)
	creatorId Int 
	creator User @relation(name: "TestarEventToUser", fields: [creatorId], references: [id], onDelete: Cascade)
}
model Warning {
	id Int @id @default(autoincrement())
	title String 
	text String @db.Text
	date String 
	creatorId Int 
	creator User @relation(name: "UserToWarning", fields: [creatorId], references: [id], onDelete: Cascade)
	confirmed User[] @relation(name: "confirmed")
	comments Comment[] @relation(name: "CommentToWarning")
}
model Comment {
	id Int @id @default(autoincrement())
	text String @db.Text
	date String 
	userId Int 
	user User @relation(name: "CommentToUser", fields: [userId], references: [id], onDelete: Cascade)
	warningId Int? 
	warning Warning? @relation(name: "CommentToWarning", fields: [warningId], references: [id], onDelete: Cascade)
}
model Nagazap {
	id Int @id @default(autoincrement())
	token String @db.Text
	lastUpdated String @default("0")
	appId String @default("317842821120983")
	phoneId String @default("306058415918366")
	bussinessId String @default("322633224256919")
	stack String @default("[]") @db.Text
	frequency String @default("10000")
	batchSize Int @default(1)
	lastMessageTime String @default("0")
}
model NagazapMessage {
	id Int @id @default(autoincrement())
	name String 
	from String 
	timestamp String 
	text String @db.Text
}